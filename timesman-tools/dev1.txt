# Development Team Request - Todo Detail Feature

## Overview
We are implementing a Todo Detail functionality to enhance our existing todo system with rich text descriptions, explanations, background information, and links.

## Current Implementation Status

### âœ… Completed Components
1. **Data Structure (timesman-type)**: Added optional `detail: Option<String>` field to Todo struct
2. **gRPC Protocol (timesman-grpc)**: Updated .proto with detail field and new endpoints:
   - `GetTodoDetail(TodoDetailParams) -> Todo`
   - `UpdateTodoDetail(UpdateTodoDetailParams) -> Todo`
3. **Type Conversions**: Updated gRPC Into/From implementations for Todo with detail field
4. **Server Endpoints**: Implemented new gRPC methods in timesman-server

### ðŸ”„ Current Blocker: bstore Compatibility
**Issue**: Compilation errors in bstore crate due to missing `detail` field in Todo constructors

**Error Details**:
```
error[E0063]: missing field `detail` in initializer of Todo
 --> timesman-bstore/src/ram.rs:247:20
  |
247 |         let todo = Todo {
    |                    ^^^^ missing `detail`

error[E0063]: missing field `detail` in initializer of Todo
  --> timesman-bstore/src/local/todo.rs:91:20
   |
91 |         let todo = Todo {
   |                    ^^^^ missing `detail`
```

## Request for Team Member

### Immediate Action Required
Please fix the bstore compilation errors by updating the Todo struct initialization in these files:

**File 1: `timesman-bstore/src/ram.rs` (line 247)**
- Add `detail: None,` to the Todo constructor

**File 2: `timesman-bstore/src/local/todo.rs` (line 91)**  
- Add `detail: None,` to the Todo constructor

### Example Fix Pattern
```rust
// Before
let todo = Todo {
    id: todo_id,
    content: content_string,
    created_at: now,
    done_at: None,
};

// After  
let todo = Todo {
    id: todo_id,
    content: content_string,
    detail: None,  // <- Add this line
    created_at: now,
    done_at: None,
};
```

### Testing Requirements
After making the changes:
1. Run `cargo build` in `timesman-bstore` directory
2. Run `cargo build` in `timesman-server` directory  
3. Ensure both compile successfully
4. Run existing tests to ensure backward compatibility

### Context
- The `detail` field is optional and backward compatible
- Existing todos without details should continue to work normally
- New todos can optionally include rich detail text
- This change maintains API compatibility while adding new functionality

## Next Development Steps (After Fix)
1. Update Client trait in timesman-tools
2. Implement gRPC client methods for todo details
3. Add CLI commands for todo detail operations
4. Enhance TUI interface with detail view/edit
5. Add comprehensive test coverage

## Priority: High
This is blocking further development of the todo detail feature. Please prioritize this fix to unblock the implementation pipeline.

## Contact
If you have questions about the implementation approach or need clarification on the requirements, please reach out immediately.

Thank you for your assistance in resolving this compatibility issue!